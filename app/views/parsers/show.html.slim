.row
  .span8
    section
      header
        h2 = t('.parser.headline', name: @parser.name)
        ul.actions
          li
            = link_to edit_parser_path(@parser), title: t('.parser.actions.edit') do
              i.icon.fa-solid.fa-pencil
      - if @parser.info_url.present? || @parser.index_url.present? || @parser.maintainer_wanted?
        .content
          dl
            - if @parser.info_url.present?
              dt = Parser.human_attribute_name(:info_url)
              dd = @parser.info_url
            - if @parser.index_url.present?
              dt= Parser.human_attribute_name(:index_url)
              dd= @parser.index_url
            - if @parser.maintainer_wanted?
              dt= Parser.human_attribute_name(:maintainer_wanted)
              dd
                i.icon.fa-solid.fa-check
                '
                = t('.parser.maintainer_is_wanted')
      .content
        ol.inline
          - if @parser.index_url.present?
            li
              = link_to sync_parser_path(@parser), class: "btn btn-primary", title: "Aktualisiere Quellen mittels Index-URL", method: :post do
                = "Aktualisiere Quellen mittels Index-URL"
          li
            = link_to new_parser_source_path(@parser), class: 'btn btn-primary', title: 'Neue Quelle/Mensa hinzufügen' do
              = 'Neue Quelle/Mensa hinzufügen'

    section
      header
        h2 = t('.sources.headline')
      table.content
        tr
          th.first = t('.sources.source')
          th colspan=2 = t('.sources.canteen')
          th = t('.sources.city')
          th = t('.sources.feeds')
          th.number
            i.fa-fw.fa-regular.fa-envelope title=t('.sources.messages')
          th.number
            i.fa-fw.fa-regular.fa-comments title=t('.sources.feedbacks')
          th.number.last
            i.fa-fw.fa-solid.fa-right-left title=t('.sources.data_proposals')
        - @sources.where(canteen: nil).each do |source|
          = render(partial: 'row', locals: { source: })
        - @sources.where.not(canteen: nil).each do |source|
          = render(partial: 'row', locals: { source: })

    section
      header
        h2 = t('.feeds.headline')
      table.content
        tr
          th.first rowspan=2 = t('.feeds.status.source')
          th rowspan=2 = t('.feeds.status.feed')
          th rowspan=2 = t('.feeds.status.time_span')
          th.last colspan=5 = t('.feeds.status.states')
        tr
          th.number
            i.fa-fw.fa-solid.fa-refresh title=t(:feed_fetch, :states, :changed)
          th.number
            i.fa-fw.fa-regular.fa-copy title=t(:feed_fetch, :states, :unchanged)
          th.number
            i.fa-fw.fa-regular.fa-circle title=t(:feed_fetch, :states, :empty)
          th.number
            i.fa-fw.fa-solid.fa-triangle-exclamation title=t(:feed_fetch, :states, :failed)
          th.number.last
            i.fa-fw.fa-solid.fa-bolt title=t(:feed_fetch, :states, :broken)
        - @sources.where.not(canteen: nil).each do |s|
          - s.feeds.each_with_index do |f, i|
            - f.feed_timespans.each do |span, fetches|
              tr
                - if span == :lastday
                  - if i.zero?
                    td.first rowspan=(s.feeds.count * f.feed_timespans.size)
                      span
                        strong = s.name
                        br
                        = s.canteen.name
                  td rowspan=f.feed_timespans.size
                    = link_to f.name, feed_messages_path(f)
                - states = fetches.group(:state).count
                - total = states.values.sum / 100.0
                td: span = t(".feeds.status.#{span}")
                td.number
                  span
                    - if states["changed"]
                      = states["changed"]
                      br
                      = t('.feeds.status.percentage', value: (states["changed"] / total).to_i)
                    - else
                      ' -
                td.number
                  span
                    - if states["unchanged"]
                      = states["unchanged"]
                      br
                      = t('.feeds.status.percentage', value: (states["unchanged"] / total).to_i)
                    - else
                      ' -
                td.number
                  span
                    - if states["empty"]
                      = states["empty"]
                      br
                      = t('.feeds.status.percentage', value: (states["empty"] / total).to_i)
                    - else
                      ' -
                td.number
                  span
                    - if states["failed"]
                      = states["failed"]
                      br
                      = t('.feeds.status.percentage', value: (states["failed"] / total).to_i)
                    - else
                      ' -
                td.number.last
                  span
                    - if states["broken"]
                      = states["broken"]
                      br
                      = t('.feeds.status.percentage', value: (states["broken"] / total).to_i)
                    - else
                      ' -
  = render partial: "users/nav"
