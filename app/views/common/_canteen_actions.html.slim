section
  header
    h3 = t('.headline')

  ul.favs
    li = link_to canteen_path(canteen) do
      i.icon.fa-fw.fa-solid.fa-mug-saucer
      = Canteen.human_action(:show)
    li = link_to edit_canteen_path(canteen) do
      i.icon.fa-fw.fa-solid.fa-pen-to-square
      = Canteen.human_action(:edit)
    - if canteen.archived?
        li = link_to canteen_active_path(canteen), method: :post do
          i.icon.fa-fw.fa-solid.fa-play
          = Canteen.human_action(:activate)
    - else
        li = link_to canteen_active_path(canteen), method: :delete do
          i.icon.fa-fw.fa-solid.fa-stop
          = Canteen.human_action(:deactivate)
    li = link_to canteen_feedbacks_path(canteen) do
      i.icon.fa-fw.fa-regular.fa-envelope
      = Feedback.human_action(:index)
    li = link_to canteen_data_proposals_path(canteen) do
      i.icon.fa-fw.fa-solid.fa-right-left
      = DataProposal.human_action(:index)
    - canteen.parsers.select {|parser| can?(:edit, parser) }.each do |parser|
      li = link_to parser_path(parser) do
        i.icon.fa-fw.fa-solid.fa-gear
        = Parser.human_action(:show)

- canteen.feeds.select {|feed| can?(:edit, feed) }.each do |feed|
  section
    header
      h3
        = t(:feed, :title, name: feed.name)
      ul.actions
        li = link_to feed_fetch_path(feed), title: t('.actions.feed.fetch', name: feed.name) do
          i.icon.fa-fw.fa-solid.fa-refresh
        li = link_to feed_messages_path(feed), title: t('.actions.feed.messages', name: feed.name) do
          i.icon.fa-fw.fa-regular.fa-envelope
        li = link_to feed.url, title: t('.actions.feed.open.url', name: feed.name) do
          i.icon.fa-fw.fa-solid.fa-code
        - if feed.source_url.present?
          li = link_to feed.source_url, title: t('.actions.feed.open.source', name: feed.name) do
            i.icon.fa-fw.fa-solid.fa-arrow-up-right-from-square
    .content
      - feed.fetches.group("state").maximum(:executed_at).each do |state, date|
        p = t(".status.last_#{state}_at", time: timeago_tag(date.localtime))
      p = t(".status.next_fetch_at", time: timeago_tag(feed.next_fetch_at, title: proc {|time, options| t('.status.next_fetch_title', time: I18n.l(time, format: options[:format]), schedule: feed.schedule) }))
